package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"math/rand"
	"fmt"
	"go_graphql/graph/model"
)


// 新しいTodoを作成し、そのTodoのリストに追加するためのGraphQLミューテーションリゾルバー。
// model.NewTodo型の入力パラメータを受け取ります。このパラメータは新しいTodoの情報を含んでいます
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// 新しいTodoを作成します。model.Todo構造体を生成し、それぞれに設定します
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", rand.Int()),
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
// todos query 用のリゾルバー
// Resolverという型がtodosというスライスを持っており、そのスライスはサーバが動作している間はメモリに保存されます。そのため、このサーバの再起動までtodosの値は保持され続けます。
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}
// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
